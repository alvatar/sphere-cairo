;;!!! Cairo library bindings for Scheme
;; .author Alvaro Castro-Castilla, 2012-2015

(include "cairo-prelude.scm")

;-------------------------------------------------------------------------------
; Functions
;-------------------------------------------------------------------------------

(define cairo_append_path (c-lambda (cairo_t* cairo_path_t*) void "cairo_append_path"))
(define cairo_arc (c-lambda (cairo_t* double double double double double) void "cairo_arc"))
(define cairo_arc_negative (c-lambda (cairo_t* double double double double double) void "cairo_arc_negative"))
(define cairo_clip (c-lambda (cairo_t*) void "cairo_clip"))
(define cairo_clip_extents (c-lambda (cairo_t* double* double* double* double*) void "cairo_clip_extents"))
(define cairo_clip_preserve (c-lambda (cairo_t*) void "cairo_clip_preserve"))
(define cairo_close_path (c-lambda (cairo_t*) void "cairo_close_path"))
(define cairo_copy_clip_rectangle_list (c-lambda (cairo_t*) cairo_rectangle_list_t* "cairo_copy_clip_rectangle_list"))
(define cairo_copy_page (c-lambda (cairo_t*) void "cairo_copy_page"))
(define cairo_copy_path (c-lambda (cairo_t*) cairo_path_t* "cairo_copy_path"))
(define cairo_copy_path_flat (c-lambda (cairo_t*) cairo_path_t* "cairo_copy_path_flat"))
(define cairo_create (c-lambda (cairo_surface_t*) cairo_t* "cairo_create"))
(define cairo_curve_to (c-lambda (cairo_t* double double double double double double) void "cairo_curve_to"))
(define cairo_debug_reset_static_data (c-lambda () void "cairo_debug_reset_static_data"))
(define cairo_destroy (c-lambda (cairo_t*) void "cairo_destroy"))
(define cairo_device_acquire (c-lambda (cairo_device_t*) cairo_status_t "cairo_device_acquire"))
(define cairo_device_destroy (c-lambda (cairo_device_t*) void "cairo_device_destroy"))
(define cairo_device_finish (c-lambda (cairo_device_t*) void "cairo_device_finish"))
(define cairo_device_flush (c-lambda (cairo_device_t*) void "cairo_device_flush"))
(define cairo_device_get_reference_count (c-lambda (cairo_device_t*) unsigned-int "cairo_device_get_reference_count"))
(define cairo_device_get_type (c-lambda (cairo_device_t*) cairo_device_type_t "cairo_device_get_type"))
(define cairo_device_get_user_data (c-lambda (cairo_device_t* cairo_user_data_key_t*) void* "cairo_device_get_user_data"))
(define cairo_device_reference (c-lambda (cairo_device_t*) cairo_device_t* "cairo_device_reference"))
(define cairo_device_release (c-lambda (cairo_device_t*) void "cairo_device_release"))
(define cairo_device_set_user_data (c-lambda (cairo_device_t* cairo_user_data_key_t* void* cairo_destroy_func_t) cairo_status_t "cairo_device_set_user_data"))
(define cairo_device_status (c-lambda (cairo_device_t*) cairo_status_t "cairo_device_status"))
(define cairo_device_to_user (c-lambda (cairo_t* double* double*) void "cairo_device_to_user"))
(define cairo_device_to_user_distance (c-lambda (cairo_t* double* double*) void "cairo_device_to_user_distance"))
(define cairo_fill (c-lambda (cairo_t*) void "cairo_fill"))
(define cairo_fill_extents (c-lambda (cairo_t* double* double* double* double*) void "cairo_fill_extents"))
(define cairo_fill_preserve (c-lambda (cairo_t*) void "cairo_fill_preserve"))
(define cairo_font_extents (c-lambda (cairo_t* cairo_font_extents_t*) void "cairo_font_extents"))
(define cairo_font_face_destroy (c-lambda (cairo_font_face_t*) void "cairo_font_face_destroy"))
(define cairo_font_face_get_reference_count (c-lambda (cairo_font_face_t*) int "cairo_font_face_get_reference_count"))
(define cairo_font_face_get_type (c-lambda (cairo_font_face_t*) cairo_font_type_t "cairo_font_face_get_type"))
(define cairo_font_face_get_user_data (c-lambda (cairo_font_face_t* cairo_user_data_key_t*) void* "cairo_font_face_get_user_data"))
(define cairo_font_face_reference (c-lambda (cairo_font_face_t*) cairo_font_face_t* "cairo_font_face_reference"))
(define cairo_font_face_set_user_data (c-lambda (cairo_font_face_t* cairo_user_data_key_t* void* cairo_destroy_func_t) cairo_status_t "cairo_font_face_set_user_data"))
(define cairo_font_face_status (c-lambda (cairo_font_face_t*) cairo_status_t "cairo_font_face_status"))
(define cairo_font_options_copy (c-lambda (cairo_font_options_t*) cairo_font_options_t* "cairo_font_options_copy"))
(define cairo_font_options_create (c-lambda () cairo_font_options_t* "cairo_font_options_create"))
(define cairo_font_options_destroy (c-lambda (cairo_font_options_t*) void "cairo_font_options_destroy"))
(define cairo_font_options_equal (c-lambda (cairo_font_options_t* cairo_font_options_t*) cairo_bool_t "cairo_font_options_equal"))
(define cairo_font_options_get_antialias (c-lambda (cairo_font_options_t*) cairo_antialias_t "cairo_font_options_get_antialias"))
(define cairo_font_options_get_hint_metrics (c-lambda (cairo_font_options_t*) cairo_hint_metrics_t "cairo_font_options_get_hint_metrics"))
(define cairo_font_options_get_hint_style (c-lambda (cairo_font_options_t*) cairo_hint_style_t "cairo_font_options_get_hint_style"))
(define cairo_font_options_get_subpixel_order (c-lambda (cairo_font_options_t*) cairo_subpixel_order_t "cairo_font_options_get_subpixel_order"))
(define cairo_font_options_hash (c-lambda (cairo_font_options_t*) long "cairo_font_options_hash"))
(define cairo_font_options_merge (c-lambda (cairo_font_options_t* cairo_font_options_t*) void "cairo_font_options_merge"))
(define cairo_font_options_set_antialias (c-lambda (cairo_font_options_t* cairo_antialias_t) void "cairo_font_options_set_antialias"))
(define cairo_font_options_set_hint_metrics (c-lambda (cairo_font_options_t* cairo_hint_metrics_t) void "cairo_font_options_set_hint_metrics"))
(define cairo_font_options_set_hint_style (c-lambda (cairo_font_options_t* cairo_hint_style_t) void "cairo_font_options_set_hint_style"))
(define cairo_font_options_set_subpixel_order (c-lambda (cairo_font_options_t* cairo_subpixel_order_t) void "cairo_font_options_set_subpixel_order"))
(define cairo_font_options_status (c-lambda (cairo_font_options_t*) cairo_status_t "cairo_font_options_status"))
(define cairo_format_stride_for_width (c-lambda (cairo_format_t int) int "cairo_format_stride_for_width"))
;; TODO
;; (define cairo_ft_font_face_create_for_ft_face (c-lambda (FT-Face int) cairo_font_face_t* "cairo_ft_font_face_create_for_ft_face"))
;; (define cairo_ft_font_face_create_for_pattern (c-lambda (FcPattern*) cairo_font_face_t* "cairo_ft_font_face_create_for_pattern"))
;; (define cairo_ft_font_face_get_synthesize (c-lambda (cairo_font_face_t*) unsigned-int "cairo_ft_font_face_get_synthesize"))
;; (define cairo_ft_font_face_set_synthesize (c-lambda (cairo_font_face_t* unsigned-int) void "cairo_ft_font_face_set_synthesize"))
;; (define cairo_ft_font_face_unset_synthesize (c-lambda (cairo_font_face_t* unsigned-int) void "cairo_ft_font_face_unset_synthesize"))
;; (define cairo_ft_font_options_substitute (c-lambda (cairo_font_options_t* FcPattern*) void "cairo_ft_font_options_substitute"))
;; (define cairo_ft_scaled_font_lock_face (c-lambda (cairo_scaled_font_t*) FT-Face "cairo_ft_scaled_font_lock_face"))
;; (define cairo_ft_scaled_font_unlock_face (c-lambda (cairo_scaled_font_t*) void "cairo_ft_scaled_font_unlock_face"))
(define cairo_get_antialias (c-lambda (cairo_t*) cairo_antialias_t "cairo_get_antialias"))
(define cairo_get_current_point (c-lambda (cairo_t* double* double*) void "cairo_get_current_point"))
(define cairo_get_dash (c-lambda (cairo_t* double* double*) void "cairo_get_dash"))
(define cairo_get_dash_count (c-lambda (cairo_t*) int "cairo_get_dash_count"))
(define cairo_get_fill_rule (c-lambda (cairo_t*) cairo_fill_rule_t "cairo_get_fill_rule"))
(define cairo_get_font_face (c-lambda (cairo_t*) cairo_font_face_t* "cairo_get_font_face"))
(define cairo_get_font_matrix (c-lambda (cairo_t* cairo_matrix_t*) void "cairo_get_font_matrix"))
(define cairo_get_font_options (c-lambda (cairo_t* cairo_font_options_t*) void "cairo_get_font_options"))
(define cairo_get_group_target (c-lambda (cairo_t*) cairo_surface_t* "cairo_get_group_target"))
(define cairo_get_line_cap (c-lambda (cairo_t*) cairo_line_cap_t "cairo_get_line_cap"))
(define cairo_get_line_join (c-lambda (cairo_t*) cairo_line_join_t "cairo_get_line_join"))
(define cairo_get_line_width (c-lambda (cairo_t*) double "cairo_get_line_width"))
(define cairo_get_matrix (c-lambda (cairo_t* cairo_matrix_t*) void "cairo_get_matrix"))
(define cairo_get_miter_limit (c-lambda (cairo_t*) double "cairo_get_miter_limit"))
(define cairo_get_operator (c-lambda (cairo_t*) cairo_operator_t "cairo_get_operator"))
(define cairo_get_reference_count (c-lambda (cairo_t*) int "cairo_get_reference_count"))
(define cairo_get_scaled_font (c-lambda (cairo_t*) cairo_scaled_font_t* "cairo_get_scaled_font"))
(define cairo_get_source (c-lambda (cairo_t*) cairo_pattern_t* "cairo_get_source"))
(define cairo_get_target (c-lambda (cairo_t*) cairo_surface_t* "cairo_get_target"))
(define cairo_get_tolerance (c-lambda (cairo_t*) double "cairo_get_tolerance"))
(define cairo_get_user_data (c-lambda (cairo_t* cairo_user_data_key_t*) void* "cairo_get_user_data"))
(define cairo_glyph_allocate (c-lambda (int) cairo_glyph_t* "cairo_glyph_allocate"))
(define cairo_glyph_extents (c-lambda (cairo_t* cairo_glyph_t* int cairo_text_extents_t*) void "cairo_glyph_extents"))
(define cairo_glyph_free (c-lambda (cairo_glyph_t*) void "cairo_glyph_free"))
(define cairo_glyph_path (c-lambda (cairo_t* cairo_glyph_t* int) void "cairo_glyph_path"))
(define cairo_has_current_point (c-lambda (cairo_t*) cairo_bool_t "cairo_has_current_point"))
(define cairo_identity_matrix (c-lambda (cairo_t*) void "cairo_identity_matrix"))
(define cairo_image_surface_create (c-lambda (cairo_format_t int int) cairo_surface_t* "cairo_image_surface_create"))
(define cairo_image_surface_create_for_data (c-lambda (unsigned-char* cairo_format_t int int int) cairo_surface_t* "cairo_image_surface_create_for_data"))
(cond-expand
 (cairo-png
  (define cairo_image_surface_create_from_png (c-lambda (char-string) cairo_surface_t* "cairo_image_surface_create_from_png"))
  (define cairo_image_surface_create_from_png_stream (c-lambda (cairo_read_func_t void*) cairo_surface_t* "cairo_image_surface_create_from_png_stream")))
 (else))
(define cairo_image_surface_get_data (c-lambda (cairo_surface_t*) unsigned-char* "cairo_image_surface_get_data"))
(define cairo_image_surface_get_format (c-lambda (cairo_surface_t*) cairo_format_t "cairo_image_surface_get_format"))
(define cairo_image_surface_get_height (c-lambda (cairo_surface_t*) int "cairo_image_surface_get_height"))
(define cairo_image_surface_get_stride (c-lambda (cairo_surface_t*) int "cairo_image_surface_get_stride"))
(define cairo_image_surface_get_width (c-lambda (cairo_surface_t*) int "cairo_image_surface_get_width"))
(define cairo_in_clip (c-lambda (cairo_t* double double) cairo_bool_t "cairo_in_clip"))
(define cairo_in_fill (c-lambda (cairo_t* double double) cairo_bool_t "cairo_in_fill"))
(define cairo_in_stroke (c-lambda (cairo_t* double double) cairo_bool_t "cairo_in_stroke"))
(define cairo_line_to (c-lambda (cairo_t* double double) void "cairo_line_to"))
(define cairo_mask (c-lambda (cairo_t* cairo_pattern_t*) void "cairo_mask"))
(define cairo_mask_surface (c-lambda (cairo_t* cairo_surface_t* double double) void "cairo_mask_surface"))
(define cairo_matrix_init (c-lambda (cairo_matrix_t* double double double double double double) void "cairo_matrix_init"))
(define cairo_matrix_init_identity (c-lambda (cairo_matrix_t*) void "cairo_matrix_init_identity"))
(define cairo_matrix_init_rotate (c-lambda (cairo_matrix_t* double) void "cairo_matrix_init_rotate"))
(define cairo_matrix_init_scale (c-lambda (cairo_matrix_t* double double) void "cairo_matrix_init_scale"))
(define cairo_matrix_init_translate (c-lambda (cairo_matrix_t* double double) void "cairo_matrix_init_translate"))
(define cairo_matrix_invert (c-lambda (cairo_matrix_t*) cairo_status_t "cairo_matrix_invert"))
(define cairo_matrix_multiply (c-lambda (cairo_matrix_t* cairo_matrix_t* cairo_matrix_t*) void "cairo_matrix_multiply"))
(define cairo_matrix_rotate (c-lambda (cairo_matrix_t* double) void "cairo_matrix_rotate"))
(define cairo_matrix_scale (c-lambda (cairo_matrix_t* double double) void "cairo_matrix_scale"))
(define cairo_matrix_transform_distance (c-lambda (cairo_matrix_t* double* double*) void "cairo_matrix_transform_distance"))
(define cairo_matrix_transform_point (c-lambda (cairo_matrix_t* double* double*) void "cairo_matrix_transform_point"))
(define cairo_matrix_translate (c-lambda (cairo_matrix_t* double double) void "cairo_matrix_translate"))
(define cairo_mesh_pattern_begin_patch (c-lambda (cairo_pattern_t*) void "cairo_mesh_pattern_begin_patch"))
(define cairo_mesh_pattern_curve_to (c-lambda (cairo_pattern_t* double double double double double double) void "cairo_mesh_pattern_curve_to"))
(define cairo_mesh_pattern_end_patch (c-lambda (cairo_pattern_t*) void "cairo_mesh_pattern_end_patch"))
(define cairo_mesh_pattern_get_control_point (c-lambda (cairo_pattern_t* unsigned-int unsigned-int double* double*) cairo_status_t "cairo_mesh_pattern_get_control_point"))
(define cairo_mesh_pattern_get_corner_color_rgba (c-lambda (cairo_pattern_t* unsigned-int unsigned-int double* double* double* double*) cairo_status_t "cairo_mesh_pattern_get_corner_color_rgba"))
(define cairo_mesh_pattern_get_patch_count (c-lambda (cairo_pattern_t* unsigned-int*) cairo_status_t "cairo_mesh_pattern_get_patch_count"))
(define cairo_mesh_pattern_get_path (c-lambda (cairo_pattern_t* unsigned-int) cairo_path_t* "cairo_mesh_pattern_get_path"))
(define cairo_mesh_pattern_line_to (c-lambda (cairo_pattern_t* double double) void "cairo_mesh_pattern_line_to"))
(define cairo_mesh_pattern_move_to (c-lambda (cairo_pattern_t* double double) void "cairo_mesh_pattern_move_to"))
(define cairo_mesh_pattern_set_control_point (c-lambda (cairo_pattern_t* unsigned-int double double) void "cairo_mesh_pattern_set_control_point"))
(define cairo_mesh_pattern_set_corner_color_rgb (c-lambda (cairo_pattern_t* unsigned-int double double double) void "cairo_mesh_pattern_set_corner_color_rgb"))
(define cairo_mesh_pattern_set_corner_color_rgba (c-lambda (cairo_pattern_t* unsigned-int double double double double) void "cairo_mesh_pattern_set_corner_color_rgba"))
(define cairo_move_to (c-lambda (cairo_t* double double) void "cairo_move_to"))
(define cairo_new_path (c-lambda (cairo_t*) void "cairo_new_path"))
(define cairo_new_sub_path (c-lambda (cairo_t*) void "cairo_new_sub_path"))
(define cairo_paint (c-lambda (cairo_t*) void "cairo_paint"))
(define cairo_paint_with_alpha (c-lambda (cairo_t* double) void "cairo_paint_with_alpha"))
(define cairo_path_destroy (c-lambda (cairo_path_t*) void "cairo_path_destroy"))
(define cairo_path_extents (c-lambda (cairo_t* double* double* double* double*) void "cairo_path_extents"))
(define cairo_pattern_add_color_stop_rgb (c-lambda (cairo_pattern_t* double double double double) void "cairo_pattern_add_color_stop_rgb"))
(define cairo_pattern_add_color_stop_rgba (c-lambda (cairo_pattern_t* double double double double double) void "cairo_pattern_add_color_stop_rgba"))
(define cairo_pattern_create_for_surface (c-lambda (cairo_surface_t*) cairo_pattern_t* "cairo_pattern_create_for_surface"))
(define cairo_pattern_create_linear (c-lambda (double double double double) cairo_pattern_t* "cairo_pattern_create_linear"))
(define cairo_pattern_create_mesh (c-lambda () cairo_pattern_t* "cairo_pattern_create_mesh"))
(define cairo_pattern_create_radial (c-lambda (double double double double double double) cairo_pattern_t* "cairo_pattern_create_radial"))
(define cairo_pattern_create_raster_source (c-lambda (void* cairo_content_t int int) cairo_pattern_t* "cairo_pattern_create_raster_source"))
(define cairo_pattern_create_rgb (c-lambda (double double double) cairo_pattern_t* "cairo_pattern_create_rgb"))
(define cairo_pattern_create_rgba (c-lambda (double double double double) cairo_pattern_t* "cairo_pattern_create_rgba"))
(define cairo_pattern_destroy (c-lambda (cairo_pattern_t*) void "cairo_pattern_destroy"))
(define cairo_pattern_get_color_stop_count (c-lambda (cairo_pattern_t* int*) cairo_status_t "cairo_pattern_get_color_stop_count"))
(define cairo_pattern_get_color_stop_rgba (c-lambda (cairo_pattern_t* int double* double* double* double* double*) cairo_status_t "cairo_pattern_get_color_stop_rgba"))
(define cairo_pattern_get_extend (c-lambda (cairo_pattern_t*) cairo_extend_t "cairo_pattern_get_extend"))
(define cairo_pattern_get_filter (c-lambda (cairo_pattern_t*) cairo_filter_t "cairo_pattern_get_filter"))
(define cairo_pattern_get_linear_points (c-lambda (cairo_pattern_t* double* double* double* double*) cairo_status_t "cairo_pattern_get_linear_points"))
(define cairo_pattern_get_matrix (c-lambda (cairo_pattern_t* cairo_matrix_t*) void "cairo_pattern_get_matrix"))
(define cairo_pattern_get_radial_circles (c-lambda (cairo_pattern_t* double* double* double* double* double* double*) cairo_status_t "cairo_pattern_get_radial_circles"))
(define cairo_pattern_get_reference_count (c-lambda (cairo_pattern_t*) int "cairo_pattern_get_reference_count"))
(define cairo_pattern_get_rgba (c-lambda (cairo_pattern_t* double* double* double* double*) cairo_status_t "cairo_pattern_get_rgba"))
(define cairo_pattern_get_surface (c-lambda (cairo_pattern_t* cairo_surface_t**) cairo_status_t "cairo_pattern_get_surface"))
(define cairo_pattern_get_type (c-lambda (cairo_pattern_t*) cairo_pattern_type_t "cairo_pattern_get_type"))
(define cairo_pattern_get_user_data (c-lambda (cairo_pattern_t* cairo_user_data_key_t*) void* "cairo_pattern_get_user_data"))
(define cairo_pattern_reference (c-lambda (cairo_pattern_t*) cairo_pattern_t* "cairo_pattern_reference"))
(define cairo_pattern_set_extend (c-lambda (cairo_pattern_t* cairo_extend_t) void "cairo_pattern_set_extend"))
(define cairo_pattern_set_filter (c-lambda (cairo_pattern_t* cairo_filter_t) void "cairo_pattern_set_filter"))
(define cairo_pattern_set_matrix (c-lambda (cairo_pattern_t* cairo_matrix_t*) void "cairo_pattern_set_matrix"))
(define cairo_pattern_set_user_data (c-lambda (cairo_pattern_t* cairo_user_data_key_t* void* cairo_destroy_func_t) cairo_status_t "cairo_pattern_set_user_data"))
(define cairo_pattern_status (c-lambda (cairo_pattern_t*) cairo_status_t "cairo_pattern_status"))
(cond-expand
 (cairo-pdf
  (define cairo_pdf_get_versions (c-lambda (cairo_pdf_version_t** int*) void "cairo_pdf_get_versions"))
  (define cairo_pdf_surface_create (c-lambda (char-string double double) cairo_surface_t* "cairo_pdf_surface_create"))
  (define cairo_pdf_surface_create_for_stream (c-lambda (cairo_write_func_t void* double double) cairo_surface_t* "cairo_pdf_surface_create_for_stream"))
  (define cairo_pdf_surface_restrict_to_version (c-lambda (cairo_surface_t* cairo_pdf_version_t) void "cairo_pdf_surface_restrict_to_version"))
  (define cairo_pdf_surface_set_size (c-lambda (cairo_surface_t* double double) void "cairo_pdf_surface_set_size"))
  (define cairo_pdf_version_to_string (c-lambda (cairo_pdf_version_t) char-string "cairo_pdf_version_to_string")))
 (else))
(define cairo_pop_group (c-lambda (cairo_t*) cairo_pattern_t* "cairo_pop_group"))
(define cairo_pop_group_to_source (c-lambda (cairo_t*) void "cairo_pop_group_to_source"))
(cond-expand
 (cairo-ps
  (define cairo_ps_get_levels (c-lambda (cairo_ps_level_t** int*) void "cairo_ps_get_levels"))
  (define cairo_ps_level_to_string (c-lambda (cairo_ps_level_t) char-string "cairo_ps_level_to_string"))
  (define cairo_ps_surface_create (c-lambda (char-string double double) cairo_surface_t* "cairo_ps_surface_create"))
  (define cairo_ps_surface_create_for_stream (c-lambda (cairo_write_func_t void* double double) cairo_surface_t* "cairo_ps_surface_create_for_stream"))
  (define cairo_ps_surface_dsc_begin_page_setup (c-lambda (cairo_surface_t*) void "cairo_ps_surface_dsc_begin_page_setup"))
  (define cairo_ps_surface_dsc_begin_setup (c-lambda (cairo_surface_t*) void "cairo_ps_surface_dsc_begin_setup"))
  (define cairo_ps_surface_dsc_comment (c-lambda (cairo_surface_t* char-string) void "cairo_ps_surface_dsc_comment"))
  (define cairo_ps_surface_get_eps (c-lambda (cairo_surface_t*) cairo_bool_t "cairo_ps_surface_get_eps"))
  (define cairo_ps_surface_restrict_to_level (c-lambda (cairo_surface_t* cairo_ps_level_t) void "cairo_ps_surface_restrict_to_level"))
  (define cairo_ps_surface_set_eps (c-lambda (cairo_surface_t* cairo_bool_t) void "cairo_ps_surface_set_eps"))
  (define cairo_ps_surface_set_size (c-lambda (cairo_surface_t* double double) void "cairo_ps_surface_set_size"))
  (define cairo_push_group (c-lambda (cairo_t*) void "cairo_push_group"))
  (define cairo_push_group_with_content (c-lambda (cairo_t* cairo_content_t) void "cairo_push_group_with_content")))
 (else))
;; TODO
;; cairo_quartz_font_face_create_for_atsu_font_id, cairo_quartz_font_face_create_for_atsu_font_id ()
;; cairo_quartz_font_face_create_for_cgfont, cairo_quartz_font_face_create_for_cgfont ()
;; cairo_quartz_surface_create, cairo_quartz_surface_create ()
;; cairo_quartz_surface_create_for_cg_context, cairo_quartz_surface_create_for_cg_context ()
;; cairo_quartz_surface_get_cg_context, cairo_quartz_surface_get_cg_context ()
(define cairo_raster_source_pattern_get_acquire (c-lambda (cairo_pattern_t* cairo_raster_source_acquire_func_t* cairo_raster_source_release_func_t*) void "cairo_raster_source_pattern_get_acquire"))
(define cairo_raster_source_pattern_get_callback_data (c-lambda (cairo_pattern_t*) void* "cairo_raster_source_pattern_get_callback_data"))
(define cairo_raster_source_pattern_get_copy (c-lambda (cairo_pattern_t*) cairo_raster_source_copy_func_t "cairo_raster_source_pattern_get_copy"))
(define cairo_raster_source_pattern_get_finish (c-lambda (cairo_pattern_t*) cairo_raster_source_finish_func_t "cairo_raster_source_pattern_get_finish"))
(define cairo_raster_source_pattern_get_snapshot (c-lambda (cairo_pattern_t*) cairo_raster_source_finish_func_t "cairo_raster_source_pattern_get_snapshot"))
;; FIX
;; (define cairo_raster_source_pattern_set_acquire (c-lambda (cairo_pattern_t* cairo_raster_source_acquire_func_t cairo_raster_source_release_func_t) void "cairo_raster_source_pattern_set_acquire"))
(define cairo_raster_source_pattern_set_callback_data (c-lambda (cairo_pattern_t* void*) void "cairo_raster_source_pattern_set_callback_data"))
(define cairo_raster_source_pattern_set_copy (c-lambda (cairo_pattern_t* cairo_raster_source_copy_func_t) void "cairo_raster_source_pattern_set_copy"))
(define cairo_raster_source_pattern_set_finish (c-lambda (cairo_pattern_t* cairo_raster_source_finish_func_t) void "cairo_raster_source_pattern_set_finish"))
(define cairo_raster_source_pattern_set_snapshot (c-lambda (cairo_pattern_t* cairo_raster_source_snapshot_func_t) void "cairo_raster_source_pattern_set_snapshot"))
(define cairo_recording_surface_create (c-lambda (cairo_content_t cairo_rectangle_t*) cairo_surface_t* "cairo_recording_surface_create"))
(define cairo_recording_surface_get_extents (c-lambda (cairo_surface_t* cairo_rectangle_t*) cairo_bool_t "cairo_recording_surface_get_extents"))
(define cairo_recording_surface_ink_extents (c-lambda (cairo_surface_t* double* double* double* double*) void "cairo_recording_surface_ink_extents"))
(define cairo_rectangle (c-lambda (cairo_t* double double double double) void "cairo_rectangle"))
(define cairo_rectangle_list_destroy (c-lambda (cairo_rectangle_list_t*) void "cairo_rectangle_list_destroy"))
(define cairo_reference (c-lambda (cairo_t*) cairo_t* "cairo_reference"))
(define cairo_region_contains_point (c-lambda (cairo_region_t* int int) cairo_bool_t "cairo_region_contains_point"))
(define cairo_region_contains_rectangle (c-lambda (cairo_region_t* cairo_rectangle_int_t*) cairo_region_overlap_t "cairo_region_contains_rectangle"))
(define cairo_region_copy (c-lambda (cairo_region_t*) cairo_region_t* "cairo_region_copy"))
(define cairo_region_create (c-lambda () cairo_region_t* "cairo_region_create"))
(define cairo_region_create_rectangle (c-lambda (cairo_rectangle_int_t*) cairo_region_t* "cairo_region_create_rectangle"))
(define cairo_region_create_rectangles (c-lambda (cairo_rectangle_int_t* int) cairo_region_t* "cairo_region_create_rectangles"))
(define cairo_region_destroy (c-lambda (cairo_region_t*) void "cairo_region_destroy"))
(define cairo_region_equal (c-lambda (cairo_region_t* cairo_region_t*) cairo_bool_t "cairo_region_equal"))
(define cairo_region_get_extents (c-lambda (cairo_region_t* cairo_rectangle_int_t*) void "cairo_region_get_extents"))
(define cairo_region_get_rectangle (c-lambda (cairo_region_t* int cairo_rectangle_int_t*) void "cairo_region_get_rectangle"))
(define cairo_region_intersect (c-lambda (cairo_region_t* cairo_region_t*) cairo_status_t "cairo_region_intersect"))
(define cairo_region_intersect_rectangle (c-lambda (cairo_region_t* cairo_rectangle_int_t*) cairo_status_t "cairo_region_intersect_rectangle"))
(define cairo_region_is_empty (c-lambda (cairo_region_t*) cairo_bool_t "cairo_region_is_empty"))
(define cairo_region_num_rectangles (c-lambda (cairo_region_t*) int "cairo_region_num_rectangles"))
(define cairo_region_reference (c-lambda (cairo_region_t*) cairo_region_t* "cairo_region_reference"))
(define cairo_region_status (c-lambda (cairo_region_t*) cairo_status_t "cairo_region_status"))
(define cairo_region_subtract (c-lambda (cairo_region_t* cairo_region_t*) cairo_status_t "cairo_region_subtract"))
(define cairo_region_subtract_rectangle (c-lambda (cairo_region_t* cairo_rectangle_int_t*) cairo_status_t "cairo_region_subtract_rectangle"))
(define cairo_region_translate (c-lambda (cairo_region_t* int int) void "cairo_region_translate"))
(define cairo_region_union (c-lambda (cairo_region_t* cairo_region_t*) cairo_status_t "cairo_region_union"))
(define cairo_region_union_rectangle (c-lambda (cairo_region_t* cairo_rectangle_int_t*) cairo_status_t "cairo_region_union_rectangle"))
(define cairo_region_xor (c-lambda (cairo_region_t* cairo_region_t*) cairo_status_t "cairo_region_xor"))
(define cairo_region_xor_rectangle (c-lambda (cairo_region_t* cairo_rectangle_int_t*) cairo_status_t "cairo_region_xor_rectangle"))
(define cairo_rel_curve_to (c-lambda (cairo_t* double double double double double double) void "cairo_rel_curve_to"))
(define cairo_rel_line_to (c-lambda (cairo_t* double double) void "cairo_rel_line_to"))
(define cairo_rel_move_to (c-lambda (cairo_t* double double) void "cairo_rel_move_to"))
(define cairo_reset_clip (c-lambda (cairo_t*) void "cairo_reset_clip"))
(define cairo_restore (c-lambda (cairo_t*) void "cairo_restore"))
(define cairo_rotate (c-lambda (cairo_t* double) void "cairo_rotate"))
(define cairo_save (c-lambda (cairo_t*) void "cairo_save"))
(define cairo_scale (c-lambda (cairo_t* double double) void "cairo_scale"))
(define cairo_scaled_font_create (c-lambda (cairo_font_face_t* cairo_matrix_t* cairo_matrix_t* cairo_font_options_t*) cairo_scaled_font_t* "cairo_scaled_font_create"))
(define cairo_scaled_font_destroy (c-lambda (cairo_scaled_font_t*) void "cairo_scaled_font_destroy"))
(define cairo_scaled_font_extents (c-lambda (cairo_scaled_font_t* cairo_font_extents_t*) void "cairo_scaled_font_extents"))
(define cairo_scaled_font_get_ctm (c-lambda (cairo_scaled_font_t* cairo_matrix_t*) void "cairo_scaled_font_get_ctm"))
(define cairo_scaled_font_get_font_face (c-lambda (cairo_scaled_font_t*) cairo_font_face_t* "cairo_scaled_font_get_font_face"))
(define cairo_scaled_font_get_font_matrix (c-lambda (cairo_scaled_font_t* cairo_matrix_t*) void "cairo_scaled_font_get_font_matrix"))
(define cairo_scaled_font_get_font_options (c-lambda (cairo_scaled_font_t* cairo_font_options_t*) void "cairo_scaled_font_get_font_options"))
(define cairo_scaled_font_get_reference_count (c-lambda (cairo_scaled_font_t*) int "cairo_scaled_font_get_reference_count"))
(define cairo_scaled_font_get_scale_matrix (c-lambda (cairo_scaled_font_t* cairo_matrix_t*) void "cairo_scaled_font_get_scale_matrix"))
(define cairo_scaled_font_get_type (c-lambda (cairo_scaled_font_t*) cairo_font_type_t "cairo_scaled_font_get_type"))
(define cairo_scaled_font_get_user_data (c-lambda (cairo_scaled_font_t* cairo_user_data_key_t*) void* "cairo_scaled_font_get_user_data"))
(define cairo_scaled_font_glyph_extents (c-lambda (cairo_scaled_font_t* cairo_glyph_t* int cairo_text_extents_t*) void "cairo_scaled_font_glyph_extents"))
(define cairo_scaled_font_reference (c-lambda (cairo_scaled_font_t*) cairo_scaled_font_t* "cairo_scaled_font_reference"))
(define cairo_scaled_font_set_user_data (c-lambda (cairo_scaled_font_t* cairo_user_data_key_t* void* cairo_destroy_func_t) cairo_status_t "cairo_scaled_font_set_user_data"))
(define cairo_scaled_font_status (c-lambda (cairo_scaled_font_t*) cairo_status_t "cairo_scaled_font_status"))
(define cairo_scaled_font_text_extents (c-lambda (cairo_scaled_font_t* char-string cairo_text_extents_t*) void "cairo_scaled_font_text_extents"))
(define cairo_scaled_font_text_to_glyphs (c-lambda (cairo_scaled_font_t* double double char-string int cairo_glyph_t** int* cairo_text_cluster_t** int* cairo_text_cluster_flags_t) cairo_status_t "cairo_scaled_font_text_to_glyphs"))
(cond-expand
 (cairo-script
  (define cairo_script_create (c-lambda (char-string) cairo_device_t* "cairo_script_create"))
  (define cairo_script_create_for_stream (c-lambda (cairo_write_func_t void*) cairo_device_t* "cairo_script_create_for_stream"))
  (define cairo_script_from_recording_surface (c-lambda (cairo_device_t* cairo_surface_t*) cairo_status_t "cairo_script_from_recording_surface"))
  (define cairo_script_get_mode (c-lambda (cairo_device_t*) cairo_script_mode_t "cairo_script_get_mode"))
  (define cairo_script_set_mode (c-lambda (cairo_device_t* cairo_script_mode_t) void "cairo_script_set_mode"))
  (define cairo_script_surface_create (c-lambda (cairo_device_t* cairo_content_t double double) cairo_surface_t* "cairo_script_surface_create"))
  (define cairo_script_surface_create_for_target (c-lambda (cairo_device_t* cairo_surface_t*) cairo_surface_t* "cairo_script_surface_create_for_target"))
  (define cairo_script_write_comment (c-lambda (cairo_device_t* char-string int) void "cairo_script_write_comment")))
 (else))
(define cairo_select_font_face (c-lambda (cairo_t* char-string cairo_font_slant_t cairo_font_weight_t) void "cairo_select_font_face"))
(define cairo_set_antialias (c-lambda (cairo_t* cairo_antialias_t) void "cairo_set_antialias"))
(define cairo_set_dash (c-lambda (cairo_t* double* int double) void "cairo_set_dash"))
(define cairo_set_fill_rule (c-lambda (cairo_t* cairo_fill_rule_t) void "cairo_set_fill_rule"))
(define cairo_set_font_face (c-lambda (cairo_t* cairo_font_face_t*) void "cairo_set_font_face"))
(define cairo_set_font_matrix (c-lambda (cairo_t* cairo_matrix_t*) void "cairo_set_font_matrix"))
(define cairo_set_font_options (c-lambda (cairo_t* cairo_font_options_t*) void "cairo_set_font_options"))
(define cairo_set_font_size (c-lambda (cairo_t* double) void "cairo_set_font_size"))
(define cairo_set_line_cap (c-lambda (cairo_t* cairo_line_cap_t) void "cairo_set_line_cap"))
(define cairo_set_line_join (c-lambda (cairo_t* cairo_line_join_t) void "cairo_set_line_join"))
(define cairo_set_line_width (c-lambda (cairo_t* double) void "cairo_set_line_width"))
(define cairo_set_matrix (c-lambda (cairo_t* cairo_matrix_t*) void "cairo_set_matrix"))
(define cairo_set_miter_limit (c-lambda (cairo_t* double) void "cairo_set_miter_limit"))
(define cairo_set_operator (c-lambda (cairo_t* cairo_operator_t) void "cairo_set_operator"))
(define cairo_set_scaled_font (c-lambda (cairo_t* cairo_scaled_font_t*) void "cairo_set_scaled_font"))
(define cairo_set_source (c-lambda (cairo_t* cairo_pattern_t*) void "cairo_set_source"))
(define cairo_set_source_rgb (c-lambda (cairo_t* double double double) void "cairo_set_source_rgb"))
(define cairo_set_source_rgba (c-lambda (cairo_t* double double double double) void "cairo_set_source_rgba"))
(define cairo_set_source_surface (c-lambda (cairo_t* cairo_surface_t* double double) void "cairo_set_source_surface"))
(define cairo_set_tolerance (c-lambda (cairo_t* double) void "cairo_set_tolerance"))
(define cairo_set_user_data (c-lambda (cairo_t* cairo_user_data_key_t* void* cairo_destroy_func_t) cairo_status_t "cairo_set_user_data"))
(define cairo_show_glyphs (c-lambda (cairo_t* cairo_glyph_t* int) void "cairo_show_glyphs"))
(define cairo_show_page (c-lambda (cairo_t*) void "cairo_show_page"))
(define cairo_show_text (c-lambda (cairo_t* char-string) void "cairo_show_text"))
(define cairo_show_text_glyphs (c-lambda (cairo_t* char-string int cairo_glyph_t* int cairo_text_cluster_t* int cairo_text_cluster_flags_t) void "cairo_show_text_glyphs"))
(define cairo_status (c-lambda (cairo_t*) cairo_status_t "cairo_status"))
(define cairo_status_to_string (c-lambda (cairo_status_t) char-string "cairo_status_to_string"))
(define cairo_stroke (c-lambda (cairo_t*) void "cairo_stroke"))
(define cairo_stroke_extents (c-lambda (cairo_t* double* double* double* double*) void "cairo_stroke_extents"))
(define cairo_stroke_preserve (c-lambda (cairo_t*) void "cairo_stroke_preserve"))
(define cairo_surface_copy_page (c-lambda (cairo_surface_t*) void "cairo_surface_copy_page"))
(define cairo_surface_create_for_rectangle (c-lambda (cairo_surface_t* double double double double) cairo_surface_t* "cairo_surface_create_for_rectangle"))
(define cairo_surface_create_similar (c-lambda (cairo_surface_t* cairo_content_t int int) cairo_surface_t* "cairo_surface_create_similar"))
(define cairo_surface_create_similar_image (c-lambda (cairo_surface_t* cairo_format_t int int) cairo_surface_t* "cairo_surface_create_similar_image"))
(define cairo_surface_destroy (c-lambda (cairo_surface_t*) void "cairo_surface_destroy"))
(define cairo_surface_finish (c-lambda (cairo_surface_t*) void "cairo_surface_finish"))
(define cairo_surface_flush (c-lambda (cairo_surface_t*) void "cairo_surface_flush"))
(define cairo_surface_get_content (c-lambda (cairo_surface_t*) cairo_content_t "cairo_surface_get_content"))
(define cairo_surface_get_device (c-lambda (cairo_surface_t*) cairo_device_t* "cairo_surface_get_device"))
(define cairo_surface_get_device_offset (c-lambda (cairo_surface_t* double* double*) void "cairo_surface_get_device_offset"))
(define cairo_surface_get_fallback_resolution (c-lambda (cairo_surface_t* double* double*) void "cairo_surface_get_fallback_resolution"))
(define cairo_surface_get_font_options (c-lambda (cairo_surface_t* cairo_font_options_t*) void "cairo_surface_get_font_options"))
(define cairo_surface_get_mime_data (c-lambda (cairo_surface_t* char-string unsigned-char** unsigned-long*) void "cairo_surface_get_mime_data"))
(define cairo_surface_get_reference_count (c-lambda (cairo_surface_t*) int "cairo_surface_get_reference_count"))
(define cairo_surface_get_type (c-lambda (cairo_surface_t*) cairo_surface_type_t "cairo_surface_get_type"))
(define cairo_surface_get_user_data (c-lambda (cairo_surface_t* cairo_user_data_key_t*) void* "cairo_surface_get_user_data"))
(define cairo_surface_has_show_text_glyphs (c-lambda (cairo_surface_t*) cairo_bool_t "cairo_surface_has_show_text_glyphs"))
(define cairo_surface_mark_dirty (c-lambda (cairo_surface_t*) void "cairo_surface_mark_dirty"))
(define cairo_surface_mark_dirty_rectangle (c-lambda (cairo_surface_t* int int int int) void "cairo_surface_mark_dirty_rectangle"))
(define cairo_surface_reference (c-lambda (cairo_surface_t*) cairo_surface_t* "cairo_surface_reference"))
(define cairo_surface_set_device_offset (c-lambda (cairo_surface_t* double double) void "cairo_surface_set_device_offset"))
(define cairo_surface_set_fallback_resolution (c-lambda (cairo_surface_t* double double) void "cairo_surface_set_fallback_resolution"))
(define cairo_surface_set_mime_data (c-lambda (cairo_surface_t* char-string unsigned-char* unsigned-long cairo_destroy_func_t void*) cairo_status_t "cairo_surface_set_mime_data"))
(define cairo_surface_set_user_data (c-lambda (cairo_surface_t* cairo_user_data_key_t* void* cairo_destroy_func_t) cairo_status_t "cairo_surface_set_user_data"))
(define cairo_surface_show_page (c-lambda (cairo_surface_t*) void "cairo_surface_show_page"))
(define cairo_surface_status (c-lambda (cairo_surface_t*) cairo_status_t "cairo_surface_status"))
(define cairo_surface_supports_mime_type (c-lambda (cairo_surface_t* char-string) cairo_bool_t "cairo_surface_supports_mime_type"))
(define cairo_surface_unmap_image (c-lambda (cairo_surface_t* cairo_surface_t*) void "cairo_surface_unmap_image"))
(cond-expand
 (cairo-png
  (define cairo_surface_write_to_png (c-lambda (cairo_surface_t* char-string) cairo_status_t "cairo_surface_write_to_png"))
  (define cairo_surface_write_to_png_stream (c-lambda (cairo_surface_t* cairo_write_func_t void*) cairo_status_t "cairo_surface_write_to_png_stream")))
 (else))
(cond-expand
 (cairo-svg
  (define cairo_svg_get_versions (c-lambda (cairo_svg_version_t** int*) void "cairo_svg_get_versions"))
  (define cairo_svg_surface_create (c-lambda (char-string double double) cairo_surface_t* "cairo_svg_surface_create"))
  (define cairo_svg_surface_create_for_stream (c-lambda (cairo_write_func_t void* double double) cairo_surface_t* "cairo_svg_surface_create_for_stream"))
  (define cairo_svg_surface_restrict_to_version (c-lambda (cairo_surface_t* cairo_svg_version_t) void "cairo_svg_surface_restrict_to_version"))
  (define cairo_svg_version_to_string (c-lambda (cairo_svg_version_t) char-string "cairo_svg_version_to_string")))
 (else))
(define cairo_text_cluster_allocate (c-lambda (int) cairo_text_cluster_t* "cairo_text_cluster_allocate"))
(define cairo_text_cluster_free (c-lambda (cairo_text_cluster_t*) void "cairo_text_cluster_free"))
(define cairo_text_extents (c-lambda (cairo_t* char-string cairo_text_extents_t*) void "cairo_text_extents"))
(define cairo_text_path (c-lambda (cairo_t* char-string) void "cairo_text_path"))
(define cairo_toy_font_face_create (c-lambda (char-string cairo_font_slant_t cairo_font_weight_t) cairo_font_face_t* "cairo_toy_font_face_create"))
(define cairo_toy_font_face_get_family (c-lambda (cairo_font_face_t*) char-string "cairo_toy_font_face_get_family"))
(define cairo_toy_font_face_get_slant (c-lambda (cairo_font_face_t*) cairo_font_slant_t "cairo_toy_font_face_get_slant"))
(define cairo_toy_font_face_get_weight (c-lambda (cairo_font_face_t*) cairo_font_weight_t "cairo_toy_font_face_get_weight"))
(define cairo_transform (c-lambda (cairo_t* cairo_matrix_t*) void "cairo_transform"))
(define cairo_translate (c-lambda (cairo_t* double double) void "cairo_translate"))
(define cairo_user_font_face_create (c-lambda () cairo_font_face_t* "cairo_user_font_face_create"))
(define cairo_user_font_face_get_init_func (c-lambda (cairo_font_face_t*) cairo_user_scaled_font_init_func_t "cairo_user_font_face_get_init_func"))
(define cairo_user_font_face_get_render_glyph_func (c-lambda (cairo_font_face_t*) cairo_user_scaled_font_render_glyph_func_t "cairo_user_font_face_get_render_glyph_func"))
(define cairo_user_font_face_set_text_to_glyphs_func (c-lambda (cairo_font_face_t* cairo_user_scaled_font_text_to_glyphs_func_t) void "cairo_user_font_face_set_text_to_glyphs_func"))
(define cairo_user_font_face_get_unicode_to_glyph_func (c-lambda (cairo_font_face_t*) cairo_user_scaled_font_unicode_to_glyph_func_t "cairo_user_font_face_get_unicode_to_glyph_func"))
(define cairo_user_font_face_set_init_func (c-lambda (cairo_font_face_t* cairo_user_scaled_font_init_func_t) void "cairo_user_font_face_set_init_func"))
(define cairo_user_font_face_set_render_glyph_func (c-lambda (cairo_font_face_t* cairo_user_scaled_font_render_glyph_func_t) void "cairo_user_font_face_set_render_glyph_func"))
(define cairo_user_font_face_set_text_to_glyphs_func (c-lambda (cairo_font_face_t* cairo_user_scaled_font_text_to_glyphs_func_t) void "cairo_user_font_face_set_text_to_glyphs_func"))
(define cairo_user_font_face_set_unicode_to_glyph_func (c-lambda (cairo_font_face_t* cairo_user_scaled_font_unicode_to_glyph_func_t) void "cairo_user_font_face_set_unicode_to_glyph_func"))
(define cairo_user_to_device (c-lambda (cairo_t* double* double*) void "cairo_user_to_device"))
(define cairo_user_to_device_distance (c-lambda (cairo_t* double* double*) void "cairo_user_to_device_distance"))
;; TODO
;; cairo_win32_font_face_create_for_hfont, cairo_win32_font_face_create_for_hfont ()
;; cairo_win32_font_face_create_for_logfontw, cairo_win32_font_face_create_for_logfontw ()
;; cairo_win32_font_face_create_for_logfontw_hfont, cairo_win32_font_face_create_for_logfontw_hfont ()
;; cairo_win32_printing_surface_create, cairo_win32_printing_surface_create ()
;; cairo_win32_scaled_font_done_font, cairo_win32_scaled_font_done_font ()
;; cairo_win32_scaled_font_get_device_to_logical, cairo_win32_scaled_font_get_device_to_logical ()
;; cairo_win32_scaled_font_get_logical_to_device, cairo_win32_scaled_font_get_logical_to_device ()
;; cairo_win32_scaled_font_get_metrics_factor, cairo_win32_scaled_font_get_metrics_factor ()
;; cairo_win32_scaled_font_select_font, cairo_win32_scaled_font_select_font ()
;; cairo_win32_surface_create, cairo_win32_surface_create ()
;; cairo_win32_surface_create_with_ddb, cairo_win32_surface_create_with_ddb ()
;; cairo_win32_surface_create_with_dib, cairo_win32_surface_create_with_dib ()
;; cairo_win32_surface_get_dc, cairo_win32_surface_get_dc ()
;; cairo_win32_surface_get_image, cairo_win32_surface_get_image ()
;; cairo_xcb_device_debug_cap_xrender_version, cairo_xcb_device_debug_cap_xrender_version ()
;; cairo_xcb_device_debug_cap_xshm_version, cairo_xcb_device_debug_cap_xshm_version ()
;; cairo_xcb_device_debug_get_precision, cairo_xcb_device_debug_get_precision ()
;; cairo_xcb_device_debug_set_precision, cairo_xcb_device_debug_set_precision ()
;; cairo_xcb_device_get_connection, cairo_xcb_device_get_connection ()
;; cairo_xcb_surface_create, cairo_xcb_surface_create ()
;; cairo_xcb_surface_create_for_bitmap, cairo_xcb_surface_create_for_bitmap ()
;; cairo_xcb_surface_create_with_xrender_format, cairo_xcb_surface_create_with_xrender_format ()
;; cairo_xcb_surface_set_drawable, cairo_xcb_surface_set_drawable ()
;; cairo_xcb_surface_set_size, cairo_xcb_surface_set_size ()

;; (define cairo_xlib_device_debug_cap_xrender_version (c-lambda (cairo_device_t* int int) void "cairo_xlib_device_debug_cap_xrender_version"))
;; (define cairo_xlib_device_debug_get_precision (c-lambda (cairo_device_t*) int "cairo_xlib_device_debug_get_precision"))
;; (define cairo_xlib_device_debug_set_precision (c-lambda (cairo_device_t* int) void "cairo_xlib_device_debug_set_precision"))
;; (define cairo_xlib_surface_create (c-lambda (Display* Drawable Visual* int int) cairo_surface_t* "cairo_xlib_surface_create"))
;; (define cairo_xlib_surface_create_for_bitmap (c-lambda (Display* Pixmap Screen* int int) cairo_surface_t* "cairo_xlib_surface_create_for_bitmap"))
;; (define cairo_xlib_surface_create_with_xrender_format (c-lambda (cairo_device_t* int int) void "cairo_xlib_surface_create_with_xrender_format"))
;; (define cairo_xlib_surface_get_depth (c-lambda (cairo_surface_t*) int "cairo_xlib_surface_get_depth"))
;; (define cairo_xlib_surface_get_drawable (c-lambda (cairo_surface_t*) Drawable "cairo_xlib_surface_get_drawable"))
;; (define cairo_xlib_surface_get_display (c-lambda (cairo_surface_t*) Display* "cairo_xlib_surface_get_display"))
;; (define cairo_xlib_surface_get_height (c-lambda (cairo_surface_t*) int "cairo_xlib_surface_get_height"))
;; (define cairo_xlib_surface_get_screen (c-lambda (cairo_surface_t*) Screen* "cairo_xlib_surface_get_screen"))
;; (define cairo_xlib_surface_get_visual (c-lambda (cairo_surface_t*) Visual* "cairo_xlib_surface_get_visual"))
;; (define cairo_xlib_surface_get_width (c-lambda (cairo_surface_t*) int "cairo_xlib_surface_get_width"))
;; (define cairo_xlib_surface_get_xrender_format (c-lambda (cairo_device_t*) XRenderPictFormat* "cairo_xlib_surface_get_xrender_format"))
;; (define cairo_xlib_surface_set_drawable (c-lambda (cairo_surface_t* Drawable int int) void "cairo_xlib_surface_set_drawable"))
;; (define cairo_xlib_surface_set_size (c-lambda (cairo_surface_t* int int) void "cairo_xlib_surface_set_size"))

;-------------------------------------------------------------------------------
; Extra functions
;-------------------------------------------------------------------------------

(c-declare "#include <string.h>")

;; ___arg1; source texture
;; ___arg2; source texture width
;; ___arg3; source texture height
;; ___arg4: pot texture
;; ___arg5: pot size
;; ___arg6: channels
(define cairo:copy-surface-to-pot-buffer
  (c-lambda (void* unsigned-int unsigned-int
             void* unsigned-int unsigned-int)
            void
            "
int i;
for (i=0; i<___arg3; i++) {
  memcpy(___arg4+(___arg5 * ___arg6 * i), ___arg1+(___arg2 * ___arg6 * i), ___arg6 * ___arg2);
}
"))
